openapi: 3.0.0
info:
  title: E-Commerce API
  version: 1.0.0
  description: API documentation for E-Commerce system
servers:
  - url: 'http://localhost:4000'
    description: Development server

paths:
  /api/auth/signup:
    post:
      tags: [Auth]
      summary: Register a new user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterUser'
      responses:
        '201':
          description: User registered successfully
        '400':
          description: Bad request
        '500':
          description: Internal server error

  /api/auth/login:
    post:
      tags: [Auth]
      summary: Login a user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginUser'
      responses:
        '200':
          description: User logged in successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Authentication'
        '401':
          description: Unauthorized
        '500':
          description: Internal server error

  /api/auth/logout:
    get:
      tags: [Auth]
      summary: Logout a user
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successfully logged out
        '401':
          description: Unauthorized
        '500':
          description: Internal server error


  /api/users:
    get:
      tags: [User]
      summary: Get all users
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of users
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserListResponse'
        '500':
          description: Internal server error

  /api/users/{id}:
    get:
      tags: [User]
      summary: Get a user by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: User details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '404':
          description: User not found
        '500':
          description: Internal server error

    put:
      tags: [User]
      summary: Update a user by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUser'
      responses:
        '200':
          description: User updated successfully
        '400':
          description: Bad request
        '404':
          description: User not found
        '403':
          description: Forbidden
        '500':
          description: Internal server error

    delete:
      tags: [User]
      summary: Delete a user by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: User deleted successfully
        '404':
          description: User not found
        '403':
          description: Forbidden
        '500':
          description: Internal server error

  /api/categories:
    post:
      tags: [Category]
      summary: Create a new category
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateNewCategory'
      responses:
        '201':
          description: Category created successfully
        '400':
          description: Bad request
        '403':
          description: Forbidden
        '500':
          description: Internal server error

    get:
      tags: [Category]
      summary: Get all categories
      responses:
        '200':
          description: List of categories
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryListResponse'
        '500':
          description: Internal server error

  /api/categories/{id}:
    get:
      tags: [Category]
      summary: Get a category by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Category details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryResponse'
        '404':
          description: Category not found
        '500':
          description: Internal server error

    put:
      tags: [Category]
      summary: Update a category by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateCategory'
      responses:
        '200':
          description: Category updated successfully
        '400':
          description: Bad request
        '404':
          description: Category not found
        '403':
          description: Forbidden
        '500':
          description: Internal server error

    delete:
      tags: [Category]
      summary: Delete a category by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Category deleted successfully
        '404':
          description: Category not found
        '403':
          description: Forbidden
        '500':
          description: Internal server error

  /api/brands:
    post:
      tags: [Brand]
      summary: Create a new brand
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateNewBrand'
      responses:
        '201':
          description: Brand created successfully
        '400':
          description: Bad request
        '500':
          description: Internal server error

    get:
      tags: [Brand]
      summary: Get all brands
      responses:
        '200':
          description: List of brands
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BrandListResponse'
        '500':
          description: Internal server error

  /api/brands/{id}:
    get:
      tags: [Brand]
      summary: Get a brand by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Brand details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BrandResponse'
        '404':
          description: Brand not found
        '500':
          description: Internal server error

    put:
      tags: [Brand]
      summary: Update a brand by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateBrand'
      responses:
        '200':
          description: Brand updated successfully
        '400':
          description: Bad request
        '404':
          description: Brand not found
        '403':
          description: Forbidden
        '500':
          description: Internal server error

    delete:
      tags: [Brand]
      summary: Delete a brand by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Brand deleted successfully
        '404':
          description: Brand not found
        '403':
          description: Forbidden
        '500':
          description: Internal server error

  /api/products:
    post:
      tags: [Product]
      summary: Create a new product
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateProduct'
      responses:
        '201':
          description: Product created successfully
        '400':
          description: Bad request
        '500':
          description: Internal server error

    get:
      tags: [Product]
      summary: Get all products
      responses:
        '200':
          description: List of products
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductListResponse'
        '500':
          description: Internal server error

  /api/products/{id}:
    get:
      tags: [Product]
      summary: Get a product by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Product details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductResponse'
        '404':
          description: Product not found
        '500':
          description: Internal server error

    put:
      tags: [Product]
      summary: Update a product by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateProduct'
      responses:
        '200':
          description: Product updated successfully
        '400':
          description: Bad request
        '404':
          description: Product not found
        '500':
          description: Internal server error

    delete:
      tags: [Product]
      summary: Delete a product by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Product deleted successfully
        '404':
          description: Product not found
        '500':
          description: Internal server error

  /api/carouselSlides:
    post:
      tags: [CarouselSlide]
      summary: Create a new carousel slide
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCarouselSlide'
      responses:
        '201':
          description: Carousel slide created successfully
        '400':
          description: Bad request
        '500':
          description: Internal server error

    get:
      tags: [CarouselSlide]
      summary: Get all carousel slides
      responses:
        '200':
          description: List of carousel slides
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CarouselSlideListResponse'
        '500':
          description: Internal server error

  /api/carouselSlides/{id}:
    get:
      tags: [CarouselSlide]
      summary: Get a carousel slide by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Carousel slide details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CarouselSlideResponse'
        '404':
          description: Carousel slide not found
        '500':
          description: Internal server error

    put:
      tags: [CarouselSlide]
      summary: Update a carousel slide by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateCarouselSlide'
      responses:
        '200':
          description: Carousel slide updated successfully
        '400':
          description: Bad request
        '404':
          description: Carousel slide not found
        '500':
          description: Internal server error

    delete:
      tags: [CarouselSlide]
      summary: Delete a carousel slide by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Carousel slide deleted successfully
        '404':
          description: Carousel slide not found
        '500':
          description: Internal server error

components:
  schemas:
    RegisterUser:
      type: object
      properties:
        firstName:
          type: string
          minLength: 3
          maxLength: 20
          example: John
        lastName:
          type: string
          minLength: 3
          maxLength: 20
          example: Doe
        email:
          type: string
          format: email
          example: john.doe@example.com
        dateOfBirth:
          type: string
          format: date
          example: 1990-01-01
        password:
          type: string
          minLength: 8
          example: Password123!
        confirmPassword:
          type: string
          example: Password123!
      required:
        - firstName
        - lastName
        - email
        - dateOfBirth
        - password
        - confirmPassword

    LoginUser:
      type: object
      properties:
        email:
          type: string
          format: email
          example: john.doe@example.com
        password:
          type: string
          example: Password123!
      required:
        - email
        - password

    UpdateUser:
      type: object
      properties:
        firstName:
          type: string
          example: 'John'
        lastName:
          type: string
          example: 'Doe'
        email:
          type: string
          format: email
          example: 'john_doe_updated@example.com'
        dateOfBirth:
          type: string
          format: date
          example: '1990-01-01'
    UserListResponse:
      type: array
      items:
        $ref: '#/components/schemas/UserResponse'
    UserResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: 'e1e2e3e4-e5e6-e7e8-e9e0-e1e2e3e4e5e6'
        username:
          type: string
          example: 'johndoe'
        email:
          type: string
          format: email
          example: 'johndoe@example.com'

    CreateNewCategory:
      type: object
      properties:
        name:
          type: string
          minLength: 3
          maxLength: 50
          example: Electronics
        description:
          type: string
          maxLength: 150
          example: All kinds of electronic items
      required:
        - name
        - description

    UpdateCategory:
      type: object
      properties:
        name:
          type: string
          minLength: 3
          maxLength: 50
          example: Electronics
        description:
          type: string
          maxLength: 150
          example: Updated description of the category
      anyOf:
        - required: [name]
        - required: [description]

    CategoryResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string

    CategoryListResponse:
      type: object
      properties:
        status:
          type: string
        categories:
          type: array
          items:
            $ref: '#/components/schemas/CategoryResponse'

    CreateNewBrand:
      type: object
      properties:
        name:
          type: string
          minLength: 3
          maxLength: 50
          example: Apple
      required:
        - name

    UpdateBrand:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: 123e4567-e89b-12d3-a456-426614174000
        name:
          type: string
          minLength: 3
          maxLength: 50
          example: Apple
      required:
        - name

    BrandResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string

    BrandListResponse:
      type: object
      properties:
        status:
          type: string
        brands:
          type: array
          items:
            $ref: '#/components/schemas/BrandResponse'

    CreateProduct:
      type: object
      properties:
        name:
          type: string
          minLength: 3
          maxLength: 50
          example: iPhone 14
        description:
          type: string
          maxLength: 150
          example: Latest model of iPhone
        price:
          type: number
          format: float
          example: 999.99
        discountRate:
          type: number
          format: float
          example: 0.1
        categoryName:
          type: string
        brandName:
          type: string
        stock:
          type: integer
          example: 50
      required:
        - name
        - description
        - price
        - discountRate 
        - categoryName
        - brandName
        - stock

    UpdateProduct:
      type: object
      properties:
        name:
          type: string
          minLength: 3
          maxLength: 50
          example: iPhone 14
        description:
          type: string
          maxLength: 150
          example: Updated description of iPhone
        price:
          type: number
          format: float
          example: 899.99
        discountRate:
          type: number
          format: float
          example: 0.1
        categoryName:
          type: string
        brandName:
          type: string
      stock:
          type: integer
          example: 100
      anyOf:
        - required: [name]
        - required: [description]
        - required: [price]
        - required: [discountRate]
        - required: [categoryName]
        - required: [brandName]
        - required: [stock]

    ProductResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
        price:
          type: number
          format: float
        discountRate:
          type: number
          format: float
        stock:
          type: integer
        categoryName:
          type: string
        brandName:
          type: string

    ProductListResponse:
      type: object
      properties:
        status:
          type: string
        products:
          type: array
          items:
            $ref: '#/components/schemas/ProductResponse'

    CreateCarouselSlide:
      type: object
      properties:
        imageUrl:
          type: string
          format: uri
          example: https://example.com/image.jpg
        title:
          type: string
          maxLength: 100
          example: Summer Sale
        description:
          type: string
          maxLength: 250
          example: Don't miss out on our summer sale!
        slideOrder:
          type: integer
          example: 3
        categoryName:
          type: string
          example: Phone
        brandName:
          type: string
          example: Apple
      required:
        - imageUrl
        - title
        - description
        - slideOrder
        - categoryName
        - brandName

    UpdateCarouselSlide:
      type: object
      properties:
        imageUrl:
          type: string
          format: uri
          example: https://example.com/new-image.jpg
        title:
          type: string
          maxLength: 100
          example: Winter Sale
        description:
          type: string
          maxLength: 250
          example: Check out our new winter sale!
        slideOrder:
          type: integer
          example: 1
        categoryName:
          type: string
          example: Phone
        brandName:
          type: Apple
      anyOf:
        - required: [imageUrl]
        - required: [title]
        - required: [description]
        - required: [slideOrder]
        - required: [categoryName]
        - required: [brandName]

    CarouselSlideResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
        imageUrl:
          type: string
          format: uri
        title:
          type: string
        description:
          type: string
        slideOrder:
          type: integer
        categoryName:
          type: string
        brandName:
          type: string

    CarouselSlideListResponse:
      type: object
      properties:
        status:
          type: string
        slides:
          type: array
          items:
            $ref: '#/components/schemas/CarouselSlideResponse'

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
